#!/bin/bash
set -e

SUCCESS_MSGS=""
ERROR_MSGS=""

function try {
  description="$1"
  shift
  echo "🔧 $description ..."
  if "$@"; then
    SUCCESS_MSGS+="✅ $description erfolgreich.\n"
  else
    ERROR_MSGS+="❌ $description fehlgeschlagen.\n"
    echo -e "\n🔴 Fehler bei: $description\n"
    echo -e "\nErfolgreiche Schritte:\n$SUCCESS_MSGS"
    echo -e "\nFehlerhafte Schritte:\n$ERROR_MSGS"
    exit 1
  fi
}

echo "🚀 ROCm Repository und GPG-Key einrichten"

try "ROCm Paketquellen einrichten und Paketlisten aktualisieren" bash -c "
  sudo mkdir -p /etc/apt/keyrings &&
  wget -qO - https://repo.radeon.com/rocm/rocm.gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/rocm.gpg > /dev/null &&
  echo \"deb [arch=amd64 signed-by=/etc/apt/keyrings/rocm.gpg] https://repo.radeon.com/rocm/apt/6.4.2 noble main\" | sudo tee /etc/apt/sources.list.d/rocm.list &&
  echo -e 'Package: *\nPin: release o=repo.radeon.com\nPin-Priority: 600' | sudo tee /etc/apt/preferences.d/rocm-pin-600 &&
  sudo apt update
"

try "Systempakete aktualisieren" sudo apt upgrade -y && sudo apt dist-upgrade -y && sudo apt install update-manager-core -y

echo "🚀 Starte ROCm Installation"

try "Build-Tools installieren" sudo apt install -y build-essential python3-setuptools python3-wheel wget

# 🔧 Alle Benutzer mit UID ≥1000 zur Gruppe video & render hinzufügen
try "Alle Benutzer zur Gruppe video & render hinzufügen" bash -c '
  for user in $(getent passwd | awk -F: "$3 >= 1000 && $1 != \"nobody\" {print \$1}"); do
    sudo usermod -aG video,render "$user"
  done
'

# 🔧 adduser.conf vorbereiten für zukünftige Benutzer
try "adduser.conf vorbereiten (EXTRA_GROUPS)" bash -c '
  sudo sed -i "/^ADD_EXTRA_GROUPS/d" /etc/adduser.conf
  sudo sed -i "/^EXTRA_GROUPS/d" /etc/adduser.conf
  echo "ADD_EXTRA_GROUPS=1" | sudo tee -a /etc/adduser.conf >/dev/null
  echo "EXTRA_GROUPS=video render" | sudo tee -a /etc/adduser.conf >/dev/null
'

# 🔧 udev-Regeln für Containerfreigabe
try "udev-Regeln setzen für GPU-Zugriff" bash -c '
  sudo tee /etc/udev/rules.d/70-amdgpu.rules >/dev/null <<EOF
KERNEL=="kfd", GROUP="video", MODE="0660"
KERNEL=="renderD*", GROUP="video", MODE="0660"
KERNEL=="card*", GROUP="video", MODE="0660"
SUBSYSTEM=="drm", KERNEL=="controlD*", GROUP="video", MODE="0660"
EOF
'

try "udev Regeln neu laden" bash -c "
  sudo udevadm control --reload-rules &&
  sudo udevadm trigger
"

# 🔧 ROCm installieren
ROCM_VERSION="6.4.2"
ROCM_PATH="/opt/rocm-${ROCM_VERSION}"
INSTALLER_URL="https://repo.radeon.com/amdgpu-install/${ROCM_VERSION}/ubuntu/noble/amdgpu-install_6.4.60402-1_all.deb"

try "ROCm Installer herunterladen" wget -q "$INSTALLER_URL" -O amdgpu-install.deb
try "ROCm Installer Paket installieren" sudo apt install -y --allow-downgrades ./amdgpu-install.deb

try "ROCm + SDKs installieren" bash -c "yes | sudo amdgpu-install --usecase=graphics,rocm,lrt,hip,opencl,mllib,rocmdevtools,hiplibsdk,openclsdk,openmpsdk,mlsdk --no-dkms --accept-eula"

# 🔧 Umgebungsvariablen setzen
try "ROCm PATH und Umgebungsvariablen setzen" bash -c "\
  echo 'export ROCM_PATH=${ROCM_PATH}' | sudo tee /etc/profile.d/rocm.sh >/dev/null && \
  echo 'export PATH=\$ROCM_PATH/bin:\$PATH' | sudo tee -a /etc/profile.d/rocm.sh >/dev/null && \
  echo 'export LD_LIBRARY_PATH=\$ROCM_PATH/lib:\$LD_LIBRARY_PATH' | sudo tee -a /etc/profile.d/rocm.sh >/dev/null && \
  echo 'export HSA_OVERRIDE_GFX_VERSION=10.3.0' | sudo tee -a /etc/profile.d/rocm.sh >/dev/null && \
  echo '' >> ~/.bashrc && \
  echo '# ROCm Umgebung' >> ~/.bashrc && \
  echo 'export ROCM_PATH=${ROCM_PATH}' >> ~/.bashrc && \
  echo 'export PATH=\$ROCM_PATH/bin:\$PATH' >> ~/.bashrc && \
  echo 'export LD_LIBRARY_PATH=\$ROCM_PATH/lib:\$LD_LIBRARY_PATH' >> ~/.bashrc && \
  echo 'export HSA_OVERRIDE_GFX_VERSION=10.3.0' >> ~/.bashrc && \
  source ~/.bashrc
"

# 🔎 Prüfung: ist rocminfo da?
if [[ -x "${ROCM_PATH}/bin/rocminfo" ]]; then
  SUCCESS_MSGS+="✅ rocminfo gefunden und ausführbar.\n"
else
  ERROR_MSGS+="⚠️ rocminfo nicht gefunden oder nicht ausführbar. Bitte prüfen.\n"
fi

# ✅ Abschlussanzeige
echo -e "\n🎉 Installationsergebnis:\n"
echo -e "✅ Erfolgreiche Schritte:\n$SUCCESS_MSGS"
if [[ -n "$ERROR_MSGS" ]]; then
  echo -e "❌ Fehlgeschlagene Schritte:\n$ERROR_MSGS"
else
  echo -e "Keine Fehler aufgetreten.\n"
fi

# 🔁 Automatischer Neustart nur bei Erfolg
if [[ -z "$ERROR_MSGS" ]]; then
  echo -e "\n🔁 System wird in 10 Sekunden neu gestartet ..."
  sleep 10
  sudo reboot
else
  echo "⚠️ Aufgrund von Fehlern wird kein automatischer Neustart durchgeführt."
fi